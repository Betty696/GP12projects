//=============================================================================
//
// ゲームモードの処理 [game.cpp]
// Author : 川井一生
// 改変者 : 藤田高輔
// 改変内容 : ゲーム内環境の追加など
/*
ゲームモードの状態の時処理する

ゲーム自体の処理の一括管理
*/
//=============================================================================
#include "main.h"
#include "weekloop.h"
#include "game.h"
//===============================================
// チャラ	character


//===============================================
// 環境		environment


//===============================================
// アイテム


//===============================================
// UI


//===============================================
// その他	etc




//=============================================================================
// マクロ定義

//=============================================================================
// プロトタイプ宣言

//=============================================================================
// グローバル変数
GAME g_game;

//=============================================================================
// ゲームモードの初期化処理
void InitGame(int oldMode)
{
	//ゲーム取得
	GAME* game = GetGame();

	switch (oldMode)
	{
	case MODE_NULL:
		// 初めての初期化
		/*何も初期化されていあないと想定して、ゲーム画面内で使うものを全部初期化*/
		//weekloop呼び出し
		InitWeekloop(oldMode);
		//難易度初期化
		game->difficult = DIFFICULT_PROTO;
		break;

	case MODE_TITLE:
		// タイトルになかった物だけ初期化
		/*タイトル画面からゲーム画面へ切り替わった時に、タイトルで初期化されなかったものを初期化*/
		/*注意*/
		/*タイトル画面で初期化されたものはリセット処理が必要な時がある*/

		//=========================
		// 初期化

		//=========================
		// リセット

		break;
	case MODE_RESULT:
		// リザルトになかった物だけ初期化
		/*リザルト画面からゲーム画面へ切り替わった時に、リザルトで初期化されなかったものを初期化*/
		/*注意*/
		/*リザルト画面で初期化されたものはリセット処理が必要な時がある*/

		//=========================
		// 初期化

		//=========================
		// リセット

		break;

	}
	return;
}

//=============================================================================
// ゲームモードの初期化処理
void UninitGame(int mode)
{
	switch (mode)
	{
	case MODE_TITLE:
		// タイトルに使わないものをリリース
		/*ゲーム画面からタイトル画面へ切り替えるときに、タイトル画面で使わないものをリリース処理をする*/

		break;

	case MODE_RESULT:
		// リザルトに使わないものをリリース
		/*ゲーム画面からリザルト画面へ切り替えるときに、リザルト画面で使わないものをリリース処理をする*/

		break;
	}
}

//=============================================================================
// ゲームモードの最新処理
void UpdateGame(void)
{
	UpdateWeekloop();
}

//=============================================================================
// ゲームモードの描画処理
void DrawGame(void)
{
	DrawWeekloop();
}

//=============================================================================
// セット難易度関数
void SetDifficult(int difficult)
{
	//ゲーム取得
	GAME* game = GetGame();
	game->difficult = difficult;
}

//=============================================================================
// ゲーム取得関数
GAME* GetGame(void)
{
	return &g_game;
}